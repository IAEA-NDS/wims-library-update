      PROGRAM WWERCR
C-Title  : WWERCR Program
C-T
C-Purpose: Post-process the output generated by running WIMSD5B for
C-P        the WWER-type lattice benchmarks. (see wwercr.win)
C-P
C-Description: Search for K-eff and Critical Bucklings in chain 14.
C-D         The deviation from Keff=1 is calculated for the input
C-D         (experimental) bucklings. The material buckling
C-D         estimated by calculations is compared directly with the
C-D         experimental values, which are read from the reference file
C-D         (default WWERCR.REF). A comparison with the experimental
C-D         uncertainties is printed.
C-D
C-M Input Files:
C-M     1.-  File containing the WIMSD5 output for the WWER
C-M          criticality benchmarks.
C-M     2.-  File containing the experimental value. (WWERCR.REF)
C-M
C-M Output file:
C-M     3.-  Summary file contaning the comparison between
C-M          calculated and experimental values.
C-M
C-Author : D.L.Aldama, CTN
C-A
C-Version: 15/04/1999
C-
      PARAMETER (NL=100, NR=100)
      CHARACTER*120 LINE
      CHARACTER*40  BLNK,FLNM,FLST,FINP,FREF
      CHARACTER*17 LIDW(NL),LIDR(NL),LATT
      CHARACTER*1 SYM
      DIMENSION ILEAK(2),BR(3),BZ(3),IPOINT(NL),BINP(NL)
      DIMENSION IDAT(2,NL),XK(2,NL),BR2(2,NL,3),BZ2(2,NL,3),B2(2,NL,3)
      DIMENSION B2REF(NR),DELTAB(NR),XKINF(2,NL)
      DATA LIN,LRE,LOU,LKB,LTT / 1, 2, 3, 5, 6 /
      DATA BLNK/'                                        '/
     &     FLST/'WWERCR.LST'/
     &     FINP/'WWERCR.OUT'/
     &     FREF/'WWERCR.REF'/
      WRITE(LTT,91)
      WRITE(LTT,91) ' WWER-LATTICE CRITICALITY BENCHMARKS    '
      WRITE(LTT,91) ' ===================================    '
      WRITE(LTT,91)
      WRITE(LTT,91) ' Criticality prediction                 '
      WRITE(LTT,91)
C*
C* Define I/O filenames
C*
   1  WRITE(LTT,91) '        Enter the WIMS output filename: '
      WRITE(LTT,91) '                      Default filename: ',FINP
      WRITE(LTT,91) '$                     Blank = Default : '
      READ (LKB,91) FLNM
      IF(FLNM.NE.BLNK) FINP=FLNM
      OPEN (UNIT=LIN,FILE=FINP,STATUS='OLD',ERR=1)
      WRITE(LTT,91)
   2  WRITE(LTT,91) '          Enter the REFERENCE filename: '
      WRITE(LTT,91) '                      Default filename: ',FREF
      WRITE(LTT,91) '$                     Blank = Default : '
      READ (LKB,91) FLNM
      IF(FLNM.NE.BLNK) FREF=FLNM
      OPEN (UNIT=LRE,FILE=FREF,STATUS='OLD',ERR=2)
      I=1
      READ(LRE,20,ERR=500) LINE
      READ(LRE,20,ERR=500) LINE
      DO WHILE (LINE(1:40).NE.BLNK)
        READ(LINE,30) LIDR(I),B2REF(I),DELTAB(I)
        I=I+1
        READ(LRE,20, END=4, ERR=500) LINE
        IF(I.GT.NR) THEN
          STOP ' Error 1: Array capacity exceeded'
        ENDIF
      END DO
   4  KR=I-1
      CLOSE(LRE)
      WRITE(LTT,91)
   11 WRITE(LTT,91) ' Enter output report filename (*.LST) : '
      WRITE(LTT,91) '                    Default filename  : ',FLST
      WRITE(LTT,91) '           Enter new name to redefine : '
      READ (LKB,91) FLNM
      IF(FLNM.NE.BLNK) FLST=FLNM
      OPEN(UNIT=LOU,FILE=FLST,STATUS='UNKNOWN',ERR=11)
      DO I=1,NL
        BINP(I)=0.0
        DO K=1,2
          XK(K,I)=0.0
          IDAT(K,I)=-1
          DO J=1,3
            BR2(K,I,J)=0.0
            BZ2(K,I,J)=0.0
            B2(K,I,J)=0.0
          END DO
        END DO
      END DO
      IW=0
      IL=0
      LATT=BLNK(1:17)
      DO WHILE (IW.EQ.0)
        READ(LIN,'(A120)',ERR=500)LINE
        IF (LINE(7:23).EQ.'**** WWER-LATTICE') THEN
          READ(LINE,'(23X,A17)')LATT
        ELSE IF (LINE(27:34).EQ.'chain 14') THEN
          IL=IL+1
          IF (IL.GT.NL) STOP ' Error 2: Array storage exceeded '
          LIDW(IL)=LATT
          LATT=BLNK(1:17)
        ELSE IF(LINE(2:43).EQ.
     &          'diagonal transport corrected flux solution') THEN
          CALL GETKB(LIN,XK(1,IL),XKINF(1,IL),1,BR,BZ)
          IDAT(1,IL)=1
          DO K=1,3
            BR2(1,IL,K)=BR(K)*10000.
            BZ2(1,IL,K)=BZ(K)*10000.
            B2(1,IL,K)=BR2(1,IL,K)+BZ2(1,IL,K)
          END DO
            BINP(IL)=BR2(1,IL,2)+BZ2(1,IL,3)
        ELSE IF(LINE(2:20).EQ.'b(1) flux solution') THEN
          CALL GETKB(LIN,XK(2,IL),XKINF(2,IL),1,BR,BZ)
          IDAT(2,IL)=1
          DO K=1,3
            BR2(2,IL,K)=BR(K)*10000.
            BZ2(2,IL,K)=BZ(K)*10000.
            B2(2,IL,K)=BR2(2,IL,K)+BZ2(2,IL,K)
          END DO
            BINP(IL)=BR2(2,IL,2)+BZ2(2,IL,3)
        ELSE IF (LINE(2:24).EQ.'END OF FILE ON DATASET') THEN
          IW=1
        ENDIF
      END DO
  400 CLOSE(LIN)
      KL=IL
      DO IL=1,KL
        IR=1
        IFIND=0
        DO WHILE(IR.LE.KR.AND.IFIND.EQ.0)
          IF(LIDW(IL).NE.LIDR(IR)) THEN
            IR=IR+1
          ELSE
            IFIND=1
            IPOINT(IL)=IR
          ENDIF
        END DO
        IF (IFIND.EQ.0) THEN
          WRITE(LTT,*)' NO EXPERIMENTAL DATA FOR LATTICE ',LIDW(IL)
          IPOINT(IL)=-1
        ENDIF
      END DO
      DO K=1,2
        ILEAK(K)=-1
        IL=1
        DO WHILE(IL.LE.KL.AND.ILEAK(K).LT.0)
          IF(IDAT(K,IL).LT.0) THEN
            IL=IL+1
          ELSE
            ILEAK(K)=1
          ENDIF
        END DO
      END DO
      WRITE(LOU,91)
      WRITE(LOU,91)
      WRITE(LOU,91)' WWER-LATTICE CRITICALITY BENCHMARKS    '
      WRITE(LOU,91)' ===================================    '
      WRITE(LOU,91)
      WRITE(LOU,91)' Criticality prediction                 '
      WRITE(LOU,91)
      WRITE(LOU,92)' WIMSD5 input file: ',FINP
      WRITE(LOU,92)'    Reference file: ',FREF
      WRITE(LOU,92)
      DO K=1,2
        IF (ILEAK(K).GT.0) THEN
          IF (K.EQ.1) THEN
            WRITE(LOU,91)' Diffusion corrected solution           '
            WRITE(LOU,91)' ----------------------------           '
          ELSE
            WRITE(LOU,91)' B(1) corrected solution                '
            WRITE(LOU,91)' -----------------------                '
          ENDIF
          WRITE(LOU,93)' No.','LATTICE',' Kinf    ',' Keff    ',
     &                 'Keff-1.0','Cal. B2[1/m2]','Exp. B2[1/m2]'
          WRITE(LOU,93)'    ','       ','         ','         ',
     &                 '  [pcm] ',' Diff. [1/m2]','  Std. [1/m2]'
          WRITE(LOU,93)'    ','       ','         ','         ',
     &                 '        ',' Diff. [%]   ','  Std. [%]   '
          DO I=1,KL
            IF (IDAT(K,I).GT.0) THEN
              J=IPOINT(I)
              XKEFF=XK(K,I)
              XINF=XKINF(K,I)
              IDK=NINT((XKEFF-1.0)*100000.0+0.5)
              B2W=B2(K,I,3)
              IF (J.GT.0) THEN
                BB=ABS(BINP(I)-B2REF(J))
                IF (BB.GT.1.0E-4) THEN
                  WRITE(LOU,*)' *** WARNING ***  LATTICE ',LIDW(I)
                  WRITE(LOU,*)' Reference and Input Bucklings ',
     &                        'do not match ',B2REF(J),BINP(I)
                END IF
                DIFBA=B2W-B2REF(J)
                DIFBR=DIFBA/B2REF(J)*100.0
                DIFRR=DELTAB(J)/B2REF(J)*100.0
                X=ABS(DIFBR)
                Y=ABS(DIFRR)
                IF (X.GT.Y) THEN
                  SYM='*'
                ELSE
                  SYM=' '
                ENDIF
                WRITE(LOU,94)I,SYM,LIDW(I),XINF,XKEFF,IDK,B2W,B2REF(J)
                WRITE(LOU,95)DIFBA,DELTAB(J)
                WRITE(LOU,95)DIFBR,DIFRR
              ELSE
                WRITE(LOU,94)I,'?',LIDW(I),XINF,XKEFF,IDK,B2W
                WRITE(LOU,92)
                WRITE(LOU,92)
              ENDIF
            ENDIF
          END DO
          WRITE(LOU,92)
        ENDIF
      END DO
      CLOSE(LOU)
      STOP ' Normal ending'
  500 STOP ' Error 3: Error reading input files'
   20 FORMAT(A120)
   30 FORMAT(A17,7E8.0)
   91 FORMAT(2A40)
   92 FORMAT(A20,A40)
   93 FORMAT(A4,7X,A7,6X,A9,A9,A8,1X,2(1X,A13))
   94 FORMAT(I3,1X,A1,1X,A17,F8.5,F9.5,I8,1X,F12.2,F14.2)
   95 FORMAT(49X,F12.2,F14.2)
      END
      SUBROUTINE GETKB(LIN,XKEFF,XKINF,IKK,BR,BZ)
C*      Subroutine GETKB: Get Keff and Kinf from chain 14 output.
C*                        Get critical bucklings.
C*      Parameters:
C*        LIN: FORTRAN unit for the WIMSD5 output file
C*      XKEFF: Returned multiplication factor K
C*      XKINF: K-infinity
C*        IKK: Trigger
C*         if  IKK>0 --> few group K is retrieved
C*             IKK<0 --> 2 group K is retrieved
C*         BR: Array containing radial bucklings of the 3
C*             critical search.
C*         BZ: Array containing axial bucklings of the 3
C*             critical search.
C*
C*      Version: 1.0a
C*
      CHARACTER*120 LINE
      DIMENSION BR(*), BZ(*)
      READ(LIN,'(A120)',ERR=10)LINE
      IFIND=0
      DO WHILE(LINE(16:31).NE.'entry into chain'.AND.IFIND.EQ.0)
        IF (LINE(26:35).EQ.'k-infinity') THEN
          READ(LINE,'(36X,E13.0,15X,E13.0)')XINF,XEFF
          READ(LIN,'(36X,E13.0,15X,E13.0)')XINF2,XEFF2
          IF (IKK.GT.0) THEN
            XKINF=XINF
            XKEFF=XEFF
          ELSE
            XKINF=XINF2
            XKEFF=XEFF2
          END IF
        ELSE IF (LINE(9:38).EQ.'buckling search         given') THEN
          READ(LIN,'(A120)',ERR=10)LINE
          DO K=1,3
            READ(LIN,'(2E14.0)')BR(K),BZ(K)
          END DO
          IFIND=1
        END IF
        READ(LIN,'(A120)',ERR=10)LINE
      END DO
      BACKSPACE(LIN)
      RETURN
   10 WRITE(*,*)' Warning: Error found reading chain 14'
      RETURN
      END
